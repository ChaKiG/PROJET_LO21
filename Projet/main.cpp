#include <QApplication>
#include <QMessageBox>
#include "main_window.h"
#include "projet.h"
#include "programmation.h"
#include "exception.h"


int main(int argc, char* argv[]) {
	QApplication app(argc, argv);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////           obtention managers           //////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ProjetManager & projM = ProjetManager::getInstance();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////                 creation de projets                 ////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	projM.ajouterProjet("proj1", QDate::currentDate().addDays(1), QDate::currentDate().addDays(30));
	projM.ajouterProjet("proj2", QDate::currentDate().addDays(2), QDate::currentDate().addDays(25));
		


	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////             creation prerequis/parents              //////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////        insertion/creation des taches dans les projets        //////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////

	projM.getProjet("proj1").creerTache("TacheComposite", "TacheComposite_Proj1_1", QDate::currentDate().addDays(3), QDate::currentDate().addDays(10));
	

	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Tache* par_1 = &projM.getProjet("proj1").getTache("TacheComposite_Proj1_1");
	////////////////////////////////////////////////////////////////////////////////////////////////////////////


	projM.getProjet("proj1").creerTache("TacheComposite", "SousTache1_Composite", QDate::currentDate().addDays(4), QDate::currentDate().addDays(6), std::vector<Tache*>(), par_1);


	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Tache* par_2 = &projM.getProjet("proj1").getTache("SousTache1_Composite");
	////////////////////////////////////////////////////////////////////////////////////////////////////////////


	projM.getProjet("proj1").creerTache("TacheComposite", "SousSousTache1_composite", QDate::currentDate().addDays(4), QDate::currentDate().addDays(5), std::vector<Tache*>(), par_2);
	

	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Tache* par_3 = &projM.getProjet("proj1").getTache("SousSousTache1_composite");

	std::vector<Tache*> pre_1;
	pre_1.push_back(&projM.getProjet("proj1").getTache("SousSousTache1_composite"));
	projM.getProjet("proj1").creerTache("TacheUnitaire", "SousTache2", QDate::currentDate().addDays(5), QDate::currentDate().addDays(6), pre_1, par_2, Duree(120));



	projM.getProjet("proj1").creerTache("TacheUnitairePreemptee", "SouSousSousTache", QDate::currentDate().addDays(4), QDate::currentDate().addDays(5), std::vector<Tache*>(), par_3, Duree(150));
	projM.getProjet("proj1").creerTache("TacheUnitairePreemptee", "TacheUnitaire1_Preemptee", QDate::currentDate().addDays(3), QDate::currentDate().addDays(10), std::vector<Tache*>(), NULL, Duree(150));
	projM.getProjet("proj1").creerTache("TacheUnitaire", "TacheUnitaire2", QDate::currentDate().addDays(10), QDate::currentDate().addDays(20), std::vector<Tache*>(), NULL, Duree(60));

	projM.getProjet("proj2").creerTache("TacheUnitaire", "TacheUnitaireProj2_1", QDate::currentDate().addDays(3), QDate::currentDate().addDays(20), std::vector<Tache*>(), NULL, Duree(60));
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	std::vector<Tache*> pre_6;
	pre_6.push_back(&projM.getProjet("proj2").getTache("TacheUnitaireProj2_1"));
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	projM.getProjet("proj2").creerTache("TacheUnitaire", "TacheUnitaireProj2_2", QDate::currentDate().addDays(1), QDate::currentDate().addDays(10), pre_6, NULL, Duree(60));



	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////           creation de programmations (preeempte et NON preemptee)          ///////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////


	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////        entree programme        ////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
    FenetreDepart * fenetre = new FenetreDepart();
	fenetre->show();

	return app.exec();
}
